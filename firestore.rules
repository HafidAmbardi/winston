rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Validation functions for each component type
    function isValidMaterial() {
      return request.resource.data.title is string &&
        request.resource.data.category is string &&
        request.resource.data.difficulty is string &&
        request.resource.data.image_path is string &&
        request.resource.data.price is number &&
        request.resource.data.quizzes is list;
    }
    
    function isValidQuiz() {
      return request.resource.data.category is string &&
        request.resource.data.difficulty is string &&
        request.resource.data.instruction is string &&
        request.resource.data.text is string &&
        request.resource.data.image_path is string &&
        request.resource.data.answer is string;
    }
    
    function isValidDetailedMaterial() {
      return request.resource.data.category is string &&
        request.resource.data.difficulty is string &&
        request.resource.data.title is string &&
        request.resource.data.text is string &&
        request.resource.data.image_path is string &&
        request.resource.data.explanation_title is string &&
        request.resource.data.explanation is string;
    }
    
    function isValidAggregatedMaterial() {
      return request.resource.data.category is string &&
        request.resource.data.difficulty is string &&
        request.resource.data.title is string &&
        request.resource.data.image_path is string &&
        request.resource.data.price is number &&
        request.resource.data.materials is list;
    }
    
    function isValidReading() {
      return request.resource.data.category is string &&
        request.resource.data.difficulty is string &&
        request.resource.data.title is string &&
        request.resource.data.image_path is string &&
        request.resource.data.text is string &&
        request.resource.data.price is number;
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
    }
    
    // Content collections
    match /materials/{materialId} {
      allow read: if isSignedIn();
      allow create: if isAdmin() && isValidMaterial();
      allow update: if isAdmin() && isValidMaterial();
      allow delete: if isAdmin();
    }
    
    match /quizzes/{quizId} {
      allow read: if isSignedIn();
      allow create: if isAdmin() && isValidQuiz();
      allow update: if isAdmin() && isValidQuiz();
      allow delete: if isAdmin();
    }
    
    match /detailed_materials/{materialId} {
      allow read: if isSignedIn();
      allow create: if isAdmin() && isValidDetailedMaterial();
      allow update: if isAdmin() && isValidDetailedMaterial();
      allow delete: if isAdmin();
    }
    
    match /aggregated_materials/{materialId} {
      allow read: if isSignedIn();
      allow create: if isAdmin() && isValidAggregatedMaterial();
      allow update: if isAdmin() && isValidAggregatedMaterial();
      allow delete: if isAdmin();
    }
    
    match /readings/{readingId} {
      allow read: if isSignedIn();
      allow create: if isAdmin() && isValidReading();
      allow update: if isAdmin() && isValidReading();
      allow delete: if isAdmin();
    }
    
    // User-specific junction collections
    match /user_materials/{docId} {
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.userId || isAdmin()
      );
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && (
        request.auth.uid == resource.data.userId || isAdmin()
      );
    }
    
    match /user_quiz_attempts/{docId} {
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.userId || isAdmin()
      );
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isSignedIn() && (
        request.auth.uid == resource.data.userId || isAdmin()
      );
    }
  }
}